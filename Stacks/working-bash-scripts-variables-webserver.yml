AWSTemplateFormatVersion: 2010-09-09
Description: web
Parameters:
  VPCZoneIDs:
    Description: The VPC and subnets to set up the app in.
    Type: 'List<AWS::EC2::Subnet::Id>'
  DatabaseRepo:
    Description: The URL to your github repo for the database backup file
    Type: String
  InstanceSecurityGroup:
    Description: Instance security group
    Type: 'AWS::EC2::SecurityGroup::Id'
  InstanceType:
    Description: WebServer EC2 instance type
    Type: String
    Default: t2.micro
    ConstraintDescription: must be a valid EC2 instance type.
  EBSSize:
    Description: Size of your hard drive (EBS) storage for your EC2s.
    Type: String
    Default: '30'
  KeyName:
    Description: The EC2 Key Pair to allow SSH access to the instances
    Type: 'AWS::EC2::KeyPair::KeyName'
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  ImageId:
    Description: Available AMIS - stlukesdrupal7ami
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
  ConfigFile:
    Description: Link to your config file (where db settings are stored)
    Type: String
Resources:
  WebServerGroup:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      VPCZoneIdentifier: !Ref VPCZoneIDs
      LaunchConfigurationName: !Ref LaunchConfig
      MinSize: '1'
      MaxSize: '1'
    CreationPolicy:
      ResourceSignal:
        Count: '1'
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: '1'
        MaxBatchSize: '1'
        WaitOnResourceSignals: 'true'
  LaunchConfig:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    Metadata:
      Comment: Install a simple application
      'AWS::CloudFormation::Init':
        configSets:
          setup:
            - configure_cfn
        configure_cfn:
          files:
            /etc/cfn/cfn-hup.conf:
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
                verbose=true
                interval=5
              mode: '000400'
              owner: root
              group: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub >
                [cfn-auto-reloader-hook]

                triggers=post.update

                path=Resources.EC2.Metadata.AWS::CloudFormation::Init

                action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackName}
                --resource EC2 --configsets setup --region ${AWS::Region}
              mode: '000400'
              owner: root
              group: root
            /lib/systemd/system/cfn-hup.service:
              content: !Sub |
                [Unit]
                Description=cfn-hup daemon

                [Service]
                Type=simple
                ExecStart=/opt/aws/bin/cfn-hup
                Restart=always

                [Install]
                WantedBy=multi-user.target
              mode: '000400'
              owner: root
              group: root
          commands:
            01_enable_cfn-hup:
              command: systemctl enable cfn-hup.service
            02_start_cfn-hup:
              command: systemctl start cfn-hup.service
    Properties:
      BlockDeviceMappings:
        - DeviceName: "/dev/sda1"
          Ebs:
            VolumeSize: !Ref EBSSize
            VolumeType: gp2    
      KeyName: !Ref KeyName
      ImageId: !Ref ImageId
      SecurityGroups:
        - !Ref InstanceSecurityGroup
      InstanceType: !Ref InstanceType
      UserData: 
        Fn::Base64: !Sub |
          #!/bin/bash
          apt-get update -y
          apt-get install -y python-pip
          apt-get install -y python-setuptools
          mkdir -p /opt/aws/bin
          python /usr/lib/python2.7/dist-packages/easy_install.py --script-dir /opt/aws/bin https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz
          /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource WebServerGroup --region ${AWS::Region}
          /opt/aws/bin/cfn-signal --stack ${AWS::StackName} --resource WebServerGroup --region ${AWS::Region}
          cd /var/www;touch test;cp test ${ConfigFile}
          cd /home/ubuntu;touch vic
          #clone repository that holds database backup
          git clone ${DatabaseRepo}
          #execute mysql commands to import database from current location sql file to rds