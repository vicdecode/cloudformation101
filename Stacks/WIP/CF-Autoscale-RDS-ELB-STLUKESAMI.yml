AWSTemplateFormatVersion: 2010-09-09
Description: web
Metadata: 
  AWS::CloudFormation::Interface: 
    ParameterGroups: 
      - 
        Label: 
          default: "Network Configuration"
        Parameters: 
          - InstanceSubnets
          - DBSubnets
          - AppSecurityGroups
          - AppTagName
      - 
        Label: 
          default: "RDS Configuration"
        Parameters: 
          - DBIDName
          - DBInstanceType
          - DBInstanceStorage
          - DBName
          - DBUser
          - DBPassword
          - DBRepo
          - DBRepoCkOut
      -  
        Label:
          default: "Web Server Configuration"
        Parameters:
          - ELBName
          - InstanceType
          - ImageId
          - KeyName
          - EBSSize
          - GitRepo
          - GitRepoCkOut
      -
        Label:
          default: "Bootstrap Configuration"
        Parameters:
          - BootStrapCommand

    ParameterLabels: 
      InstanceSubnets: 
        default: "Which VPC subnets should the instances be deployed to?"
      DBSubnets:
        default: "Which VPC subnets should the database be deployed to?"
      AppTagName:
        default: "Tag your app and its resources"
      AppSecurityGroups: 
        default: "Choose your security group, it should reside in the same network"
      DBInstanceType:
        default: "Choose your database instance type"
      DBInstanceStorage:
        default: "Choose your database instance storage, in GB"
      DBIDName: 
        default: "Instance name of your database"
      DBName:
        default: "Create new database"
      DBUser:
        default: "Create new db user"
      DBPassword:
        default: "Password for your user"
      DBRepo:
        default: "Git repository of your database backup"
      DBRepoCkout:
        default: "Git command(s) to checkout branch or tag for db backup"
      InstanceType:
        default: "Choose your machine configuration"
      KeyName:
        default: "Choose your SSH key pair"
      ImageId:
        default: "Choose your machine image (AMI)" 
      EBSSize: 
        default: "Choose the size of your EBS Storage, default 30GB"
      GitRepo:
        default: "Git repository of your app's codebase"
      GitRepoCkOut:
        default: "Git command(s) to checkout branch or tag for codebase"
      ELBName:
        default: "Name your load balancer"
      BootStrapCommand:
        default: "Shell commands to run on all servers"

Parameters: 
  InstanceSubnets:
    Description: The VPC and subnets to set up the app in. Public.
    Type: 'List<AWS::EC2::Subnet::Id>'
  DBSubnets:
    Description: The VPC and subnets to set up the db in. Private.
    Type: 'List<AWS::EC2::Subnet::Id>'
  ELBName:
    Description: The URL name of your load balancer link
    Type: String
  DBInstanceType:
    Default: db.t2.micro
    Description: The database instance type
    Type: String
  DBInstanceStorage:
    Default: '20'
    Type: String
  DBIDName:
    Default: db
    Description: The database instance name
    Type: String
    MinLength: '1'
    MaxLength: '64'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: must begin with a letter and contain only alphanumeric characters.
  DBName:
    Default: database
    Description: The database name
    Type: String
    MinLength: '1'
    MaxLength: '64'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: must begin with a letter and contain only alphanumeric characters.
  DBUser:
    Default: admin
    Description: The database admin account username
    Type: String
    MinLength: '1'
    MaxLength: '32'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: must begin with a letter and contain only alphanumeric characters.
  DBPassword:
    Description: The database admin account password
    Type: String
    MinLength: '8'
    MaxLength: '41'
    AllowedPattern: '[a-zA-Z0-9]*'
    ConstraintDescription: must contain only alphanumeric characters, at least 8 characters
  AppSecurityGroups:
    Description: Instance security group
    Type: 'AWS::EC2::SecurityGroup::Id'
  InstanceType:
    Description: WebServer EC2 instance type
    Type: String
    Default: t2.micro
    ConstraintDescription: must be a valid EC2 instance type.
  KeyName:
    Description: The EC2 Key Pair to allow SSH access to the instances
    Type: 'AWS::EC2::KeyPair::KeyName'
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  ImageId:
    Description: Available AMIS - apache24php74, apache24php72, stlukesdrupal7ami
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
  DBRepo:
    Default: https://user:password@github.com/org/repo.git
    Description: For private repos enter https://username:password@github/organization/repo.git
    Type: String
  DBRepoCkOut:
    Description: Use && or ; to separate commands, or link to your shell script, make sure to run chmod script +x beforehand
    Type: String
  EBSSize:
    Default: 30
    Description: Size of your instance's root hard drive, in gigabytes. 
    Type: String
  GitRepo:
    Default: https://user:password@github.com/org/repo.git
    Description: For private repos enter https://username:password@github/organization/repo.git
    Type: String
  GitRepoCkOut:
    Description: Use && or ; to separate commands, or link to your shell script, make sure to run chmod script +x beforehand
    Type: String
  BootStrapCommand:
    Description: Use && or ; to separate commands, or link to your shell script, make sure to run chmod script +x beforehand
    Type: String
  AppTagName:
    Default: ENV-CLIENT
    Description: Name of your app, tag gets applied to all resources, environment-client's name
    Type: String

Resources:
  MyDB:
    Type: 'AWS::RDS::DBInstance'
    Properties:
      DBInstanceIdentifier: !Ref DBIDName
      DBSubnetGroupName: !Ref DBSubnetGroup
      DBName: !Ref DBName
      AllocatedStorage: !Ref DBInstanceStorage
      DBInstanceClass: !Ref DBInstanceType
      Engine: MySQL
      EngineVersion: 5.7.22
      MasterUsername: !Ref DBUser
      MasterUserPassword: !Ref DBPassword
      DBParameterGroupName: decode-rds
      VPCSecurityGroups: 
        - !Ref AppSecurityGroups
      PubliclyAccessible: false
      Tags:
        - Key: Name
          Value: !Ref AppTagName
  DBSubnetGroup:
    Type: 'AWS::RDS::DBSubnetGroup'
    Properties:
      DBSubnetGroupDescription: "Private database subnets for the RDS database."
      DBSubnetGroupName: !Ref AppTagName
      SubnetIds: !Ref DBSubnets
  MyWebApp:
    DependsOn: MyDB
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      VPCZoneIdentifier: !Ref InstanceSubnets
      LaunchConfigurationName: !Ref LaunchConfig
      MinSize: '2'
      MaxSize: '3'
      LoadBalancerNames:
        - !Ref ElasticLoadBalancer
      Tags:
        - Key: Name
          PropagateAtLaunch: true
          Value: !Ref AppTagName
      AutoScalingGroupName: !Ref AppTagName
    CreationPolicy:
      ResourceSignal:
        Count: '2'
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: '1'
        MaxBatchSize: '3'
        WaitOnResourceSignals: 'true'
  LaunchConfig:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    Metadata:
      Comment: Launch my web app in a load balanced environment. 
      AWS::CloudFormation::Init:
        configSets:
          setup:
            - "configure_cfn"
        configure_cfn:
          files:
            /etc/cfn/cfn-hup.conf:
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
                verbose=true
                interval=5
              mode: "000400"
              owner: root
              group: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.EC2.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource EC2 --configsets setup --region ${AWS::Region}
              mode: "000400"
              owner: root
              group: root
            /lib/systemd/system/cfn-hup.service:
              content: !Sub |
                [Unit]
                Description=cfn-hup daemon
                
                [Service]
                Type=simple
                ExecStart=/opt/aws/bin/cfn-hup
                Restart=always
                
                [Install]
                WantedBy=multi-user.target
              mode: "000400"
              owner: root
              group: root
          commands:
            01_enable_cfn-hup:
              command: "systemctl enable cfn-hup.service"
            02_start_cfn-hup:
              command: "systemctl start cfn-hup.service"
    Properties:
      LaunchConfigurationName: !Ref AppTagName
      KeyName: !Ref KeyName
      ImageId: !Ref ImageId
      SecurityGroups:
        - !Ref AppSecurityGroups
      InstanceType: !Ref InstanceType
      BlockDeviceMappings:
        - DeviceName: "/dev/sda1"
          Ebs:
            VolumeSize: !Ref EBSSize
            VolumeType: gp2
      UserData: 
        Fn::Base64: !Sub 
        - |
          #!/bin/bash
          apt-get update -y
          apt-get install -y python-pip
          apt-get install -y python-setuptools
          mkdir -p /opt/aws/bin
          python /usr/lib/python2.7/dist-packages/easy_install.py --script-dir /opt/aws/bin https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz
          /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource MyWebApp --region ${AWS::Region}
          /opt/aws/bin/cfn-signal --stack ${AWS::StackName} --resource MyWebApp --region ${AWS::Region}
          #optional migration steps, skip this if a new app
          #clone repository that holds database backup and files and checkout branch or tag
          cd /var/www
          git clone ${DBRepo}
          ${DBRepoCkOut}
          cd /var/www
          git clone ${GitRepo}
          ${GitRepoCkOut}
          #configure apache to point to documentroot 
          #cd /etc/apache2/sites-available
          #stream edit the apache config settings into startup.com.conf
          #sed -i 's/servernamegoeshere/${ServerName}/g' startup.com.conf
          #sed -i 's/serveraliasgoeshere/${ServerAlias}/g' startup.com.conf
          #sed -i 's/webmaster@localhost/${ServerAdmin}/g' startup.com.conf
          #sed -i 's#documentrootgoeshere#${DocumentRoot}#g' startup.com.conf          
          #rename startup.com.conf to be the site url.conf
          #mv startup.com.conf ${SiteURL}.conf
          #a2ensite ${SiteURL}.conf
          #service apache2 restart
          #output db credentials into dbcreds folder
          cd /home/ubuntu
          echo ${DBEndpoint} > dbhostname
          echo ${DBName} > dbname
          echo ${DBUser} > dbuser
          echo ${DBPassword} > dbpassword
          mkdir dbcreds
          mv db* dbcreds
          #connect db to settings.php
          cd /var/www/chi-st-lukes/drupal/web/sites/default/
          cp defaultconfig.settings.php settings.php
          sed -i "s/databasenamegoeshere/${DBName}/" settings.php
          sed -i "s/dbusernamegoeshere/${DBUser}/" settings.php
          sed -i "s/dbpasswordgoeshere/${DBPassword}/" settings.php
          sed -i "s/dbhostgoeshere/${DBEndpoint}/" settings.php
          #additional bootstrap commands, i.e. builds, start services, etc.
          cd /home/ubuntu
          ./mount.sh
          ${BootStrapCommand}
        - DBEndpoint: !GetAtt MyDB.Endpoint.Address 

  ElasticLoadBalancer:
    Type: 'AWS::ElasticLoadBalancing::LoadBalancer'
    Properties:
      Subnets: !Ref InstanceSubnets
      CrossZone: 'true'
      SecurityGroups:
        - !Ref AppSecurityGroups
      Listeners:
        - LoadBalancerPort: '80'
          InstancePort: '80'
          Protocol: HTTP
      HealthCheck:
        Target: 'HTTP:80/install.php'
        HealthyThreshold: '2'
        UnhealthyThreshold: '3'
        Interval: '10'
        Timeout: '5'
      LoadBalancerName: !Ref ELBName
      Tags:
        - Key: Name
          Value: !Ref AppTagName
Outputs:
  ELBURL:
    Description: The URL of the load balancer, can be used as a CNAME record for your domain.
    Value: !Join 
      - ''
      - - 'http://'
        - !GetAtt 
          - ElasticLoadBalancer
          - DNSName
  DBCredentials:
    Description: Output of your database credentials
    Value: !Join 
      - ''
      - - 'Endpoint:'
        - !GetAtt 
          - MyDB
          - Endpoint.Address
        - ':'
        - !GetAtt 
          - MyDB
          - Endpoint.Port
        -   '; DBName:'
        - !Ref DBName
        - '; DBUser:'
        - !Ref DBUser
        - '; DBPassword :'
        - !Ref DBPassword